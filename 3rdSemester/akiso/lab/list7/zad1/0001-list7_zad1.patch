From 6420b888db965ce23bb44112c6c953dbb777bc89 Mon Sep 17 00:00:00 2001
From: michalwrpo <michal.p.walus@gmail.com>
Date: Sat, 25 Jan 2025 16:34:57 +0100
Subject: [PATCH] list7_zad1

---
 Makefile  |  5 +++-
 defs.h    |  3 ++
 proc.c    | 12 +++++++-
 proc.h    | 10 +++++++
 ps.c      | 23 +++++++++++++++
 syscall.c |  6 ++++
 syscall.h |  5 +++-
 sysfile.c | 87 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 user.h    | 11 +++++++
 usys.S    |  3 ++
 10 files changed, 161 insertions(+), 4 deletions(-)
 create mode 100644 ps.c

diff --git a/Makefile b/Makefile
index 179f01d..3c03728 100644
--- a/Makefile
+++ b/Makefile
@@ -168,6 +168,7 @@ mkfs: mkfs.c fs.h
 .PRECIOUS: %.o
 
 # added _testvm for list 6 ex. 1 and _testpages for list 6 ex. 2
+# added _ps for list 7 ex. 1
 
 UPROGS=\
 	_cat\
@@ -179,6 +180,7 @@ UPROGS=\
 	_ln\
 	_ls\
 	_mkdir\
+	_ps\
 	_rm\
 	_sh\
 	_stressfs\
@@ -254,11 +256,12 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 # added testvm.c for ex. 1 from list 6 and testpages.c for ex. 2 from list 6
+# added ps.c for list 7 ex. 1
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c testvm.c testpages.c\
+	printf.c umalloc.c testvm.c testpages.c ps.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index ccfeed5..bac4161 100644
--- a/defs.h
+++ b/defs.h
@@ -10,6 +10,8 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+struct ptable; // add ptable for list 7 ex.1
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -120,6 +122,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+struct ptable*  getptable(void); // added for list 7 ex.1
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index fcad144..793ad83 100644
--- a/proc.c
+++ b/proc.c
@@ -7,7 +7,7 @@
 #include "proc.h"
 #include "spinlock.h"
 
-struct {
+struct ptable {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -212,6 +212,8 @@ fork(void)
 
   pid = np->pid;
 
+  np->cs = 0; // added for list 7 ex. 1
+
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
@@ -347,6 +349,7 @@ scheduler(void)
       p->state = RUNNING;
 
       swtch(&(c->scheduler), p->context);
+      p->cs += 1; // added for list 7 ex. 1
       switchkvm();
 
       // Process is done running for now.
@@ -535,3 +538,10 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+// added for list 7 ex. 1
+struct ptable* 
+getptable(void)
+{
+  return &ptable;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..98d68bc 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint cs;                     // Context switches
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +57,12 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
+// added for list 7 ex. 1
+struct processInfo {
+  uint pid;
+  uint ppid;
+  uint cs; // context switches
+  uint sz;
+  char name[16];
+};
\ No newline at end of file
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..ec02b3d
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,23 @@
+// created for list 7 ex. 1
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+    int maxpid = getmaxpid();
+    int procnum = getnumproc();
+
+    printf(1, "Number of processes: %d\n", procnum);
+    printf(1, "Max PID: %d\n", maxpid);
+
+    for (int i = 1; i <= maxpid; i++) {
+        struct processInfo pi;
+        if (getprocinfo(i, &pi) == 0) {
+            printf(1, "PID: %d, PPID: %d, Size: %d, cs: %d, Name: %s\n", pi.pid, pi.ppid, pi.sz, pi.cs, pi.name);
+        }
+        
+    }
+
+    exit();
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index 2964c60..4fa6ac9 100644
--- a/syscall.c
+++ b/syscall.c
@@ -105,6 +105,9 @@ extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_usedvp(void); // added for list 6 ex. 2
 extern int sys_usedpp(void); // added for list 6 ex. 2
+extern int sys_getnumproc(void); // added for list 1 ex. 1
+extern int sys_getmaxpid(void); // added for list 1 ex. 1
+extern int sys_getprocinfo(void); // added for list 1 ex. 1
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -130,6 +133,9 @@ static int (*syscalls[])(void) = {
 [SYS_close]   sys_close,
 [SYS_usedvp] sys_usedvp,
 [SYS_usedpp] sys_usedpp,
+[SYS_getnumproc] sys_getnumproc,
+[SYS_getmaxpid] sys_getmaxpid,
+[SYS_getprocinfo] sys_getprocinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 84464b7..582cf2d 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,4 +21,7 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_usedvp 22 // added for list 6 ex. 2
-#define SYS_usedpp 23 // added for list 6 ex. 2
\ No newline at end of file
+#define SYS_usedpp 23 // added for list 6 ex. 2
+#define SYS_getnumproc 24 // added for list 7 ex. 1
+#define SYS_getmaxpid 25 // added for list 7 ex. 1
+#define SYS_getprocinfo 26 // added for list 7 ex. 1 
\ No newline at end of file
diff --git a/sysfile.c b/sysfile.c
index a36c0a1..3697f71 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -482,4 +482,89 @@ sys_usedpp(void)
   }
 
   return pp;
-}
\ No newline at end of file
+}
+
+extern struct {
+  struct spinlock lock;
+  struct proc proc[NPROC];
+} ptable;
+
+// added for list 7 ex. 1
+int
+sys_getnumproc(void) {
+  int procnum = 0;
+  struct proc *p;
+
+  if (!holding(&ptable.lock)) {
+    acquire(&ptable.lock);
+  }
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state != UNUSED) {
+      procnum++;
+    }
+  }
+  
+  release(&ptable.lock);
+
+  return procnum;
+}
+
+// added for list 7 ex. 1
+int
+sys_getmaxpid(void) {
+  int maxpid = 0;
+  struct proc *p;
+
+  if (!holding(&ptable.lock)) {
+    acquire(&ptable.lock);
+  }
+  
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if (p->pid > maxpid) {
+      maxpid = p->pid;
+    }
+  }
+
+  release(&ptable.lock);
+
+  return maxpid;
+}
+
+// added for list 7 ex. 1
+int
+sys_getprocinfo(void) {
+  int pid;
+  struct proc *p;
+  struct processInfo *pi;
+
+  if (argint(0, &pid) < 0 || argptr(1, (void *)&pi, sizeof(*pi)) < 0) {
+    return -1;
+  }
+  
+  if (!holding(&ptable.lock)) {
+    acquire(&ptable.lock);
+  }
+  
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if (p->pid == pid) {
+      pi->pid = p->pid;
+
+      if (p->parent) {
+        pi->ppid = p->parent->pid;
+      } else {
+        pi->ppid = 0;
+      }
+
+      pi->sz = p->sz;
+      pi->cs = p->cs;
+      safestrcpy(pi->name, p->name, sizeof(p->name));
+      release(&ptable.lock);
+      return 0;  
+    }
+  }
+
+  release(&ptable.lock);
+  return -1;
+}
diff --git a/user.h b/user.h
index 2c20d45..0940ebf 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,13 @@
 struct stat;
 struct rtcdate;
+// added for list 7 ex. 1
+struct processInfo {
+  uint pid;
+  uint ppid;
+  uint cs; // context switches
+  uint sz;
+  char name[16];
+};
 
 // system calls
 int fork(void);
@@ -25,6 +33,9 @@ int sleep(int);
 int uptime(void);
 int usedvp(void); // added for list 6 ex. 2
 int usedpp(void); // added for list 6 ex. 2
+int getnumproc(void);
+int getmaxpid(void);
+int getprocinfo(int pid, struct processInfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 4b8bb3e..42172dd 100644
--- a/usys.S
+++ b/usys.S
@@ -31,3 +31,6 @@ SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(usedvp)
 SYSCALL(usedpp)
+SYSCALL(getnumproc)
+SYSCALL(getmaxpid)
+SYSCALL(getprocinfo)
\ No newline at end of file
-- 
2.47.1

